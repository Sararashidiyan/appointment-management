// <auto-generated />
using System;
using AppointmentManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppointmentManagementContext))]
    partial class AppointmentManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentManagement.Domain.Appointments.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DoctorExpertId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StateReseon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ClinicSettings.ClinicSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("VisitPeriodPerMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClinicSettings", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.DoctorSchedules.WeeklySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleTemplateId");

                    b.ToTable("WeeklySchedules", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpert", b =>
                {
                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DoctorId", "ExpertId");

                    b.HasIndex("ExpertId");

                    b.ToTable("DoctorExperts", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpertRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DoctorExpertDoctorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DoctorExpertExpertId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DoctorExpertDoctorId", "DoctorExpertExpertId");

                    b.ToTable("DoctorExpertRate");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpertReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DoctorExpertDoctorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DoctorExpertExpertId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorExpertDoctorId", "DoctorExpertExpertId");

                    b.ToTable("DoctorExpertReview");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Experts.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LatinTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Experts", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ScheduleTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTemplates", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ClinicSettings.ClinicSchedules.ClinicSchedule", b =>
                {
                    b.HasBaseType("AppointmentManagement.Domain.ScheduleTemplate");

                    b.Property<int>("ClinicSettingId")
                        .HasColumnType("int");

                    b.HasIndex("ClinicSettingId");

                    b.ToTable("ClinicSchedules", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.DoctorSchedules.DoctorDefaultSchedule", b =>
                {
                    b.HasBaseType("AppointmentManagement.Domain.ScheduleTemplate");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDefaultSchedules", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.DoctorSchedules.DoctorOverrideSchedule", b =>
                {
                    b.HasBaseType("AppointmentManagement.Domain.ScheduleTemplate");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorOverrideSchedules", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.Doctor", b =>
                {
                    b.HasBaseType("AppointmentManagement.Domain.Users.User");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Patients.Patient", b =>
                {
                    b.HasBaseType("AppointmentManagement.Domain.Users.User");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.SystemUsers.SystemUser", b =>
                {
                    b.HasBaseType("AppointmentManagement.Domain.Users.User");

                    b.Property<bool>("IsSupperAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.ToTable("SystemUsers", (string)null);
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Appointments.Appointment", b =>
                {
                    b.OwnsOne("AppointmentManagement.Domain.Appointments.AppointmentDueDateTime", "DueDateTime", b1 =>
                        {
                            b1.Property<long>("AppointmentId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("DueDateTime");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("DueDateTime")
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.DoctorSchedules.WeeklySchedule", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.ScheduleTemplate", null)
                        .WithMany("WeeklySchedules")
                        .HasForeignKey("ScheduleTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("AppointmentManagement.Domain.DoctorSchedules.TimeSlot", "TimeSlot", b1 =>
                        {
                            b1.Property<long>("WeeklyScheduleId")
                                .HasColumnType("bigint");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("FromHour")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("ToHour")
                                .HasColumnType("time");

                            b1.HasKey("WeeklyScheduleId", "__synthesizedOrdinal");

                            b1.ToTable("WeeklySchedules");

                            b1.ToJson("TimeSlot");

                            b1.WithOwner()
                                .HasForeignKey("WeeklyScheduleId");
                        });

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpert", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Doctors.Doctor", "Doctor")
                        .WithMany("DoctorExperts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentManagement.Domain.Experts.Expert", "Expert")
                        .WithMany("DoctorExperts")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpertRate", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpert", null)
                        .WithMany("DoctorRates")
                        .HasForeignKey("DoctorExpertDoctorId", "DoctorExpertExpertId");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpertReview", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpert", null)
                        .WithMany("DoctorExpertReviews")
                        .HasForeignKey("DoctorExpertDoctorId", "DoctorExpertExpertId");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ScheduleTemplate", b =>
                {
                    b.OwnsOne("AppointmentManagement.Domain.DoctorSchedules.SchaduleStartDate", "SchaduleStartDate", b1 =>
                        {
                            b1.Property<int>("ScheduleTemplateId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("SchaduleStartDate");

                            b1.HasKey("ScheduleTemplateId");

                            b1.ToTable("ScheduleTemplates");

                            b1.WithOwner()
                                .HasForeignKey("ScheduleTemplateId");
                        });

                    b.Navigation("SchaduleStartDate")
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Users.User", b =>
                {
                    b.OwnsOne("AppointmentManagement.Domain.Users.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("AppointmentManagement.Domain.Users.Mobile", "Mobile", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Mobile");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Mobile")
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ClinicSettings.ClinicSchedules.ClinicSchedule", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.ClinicSettings.ClinicSetting", null)
                        .WithMany("ClinicSchedules")
                        .HasForeignKey("ClinicSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentManagement.Domain.ScheduleTemplate", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagement.Domain.ClinicSettings.ClinicSchedules.ClinicSchedule", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.DoctorSchedules.DoctorDefaultSchedule", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Doctors.Doctor", null)
                        .WithMany("DefaultSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentManagement.Domain.ScheduleTemplate", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagement.Domain.DoctorSchedules.DoctorDefaultSchedule", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.DoctorSchedules.DoctorOverrideSchedule", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Doctors.Doctor", null)
                        .WithMany("OverrideSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppointmentManagement.Domain.ScheduleTemplate", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagement.Domain.DoctorSchedules.DoctorOverrideSchedule", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.Doctor", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagement.Domain.Doctors.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Patients.Patient", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagement.Domain.Patients.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AppointmentManagement.Domain.Patients.NationalCode", "NationalCode", b1 =>
                        {
                            b1.Property<long>("PatientId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NationalCode");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("NationalCode")
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.SystemUsers.SystemUser", b =>
                {
                    b.HasOne("AppointmentManagement.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagement.Domain.SystemUsers.SystemUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ClinicSettings.ClinicSetting", b =>
                {
                    b.Navigation("ClinicSchedules");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.DoctorExperts.DoctorExpert", b =>
                {
                    b.Navigation("DoctorExpertReviews");

                    b.Navigation("DoctorRates");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Experts.Expert", b =>
                {
                    b.Navigation("DoctorExperts");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.ScheduleTemplate", b =>
                {
                    b.Navigation("WeeklySchedules");
                });

            modelBuilder.Entity("AppointmentManagement.Domain.Doctors.Doctor", b =>
                {
                    b.Navigation("DefaultSchedules");

                    b.Navigation("DoctorExperts");

                    b.Navigation("OverrideSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
